{"version":3,"file":"c978a1ff-a764abfd27f24e533ab6.js","mappings":"iHAEIA,EAAiBC,E,8GAcrB,IAAIC,EAAa,CAAEC,I,QAAKA,GACpBC,GAASC,EAAAA,EAAAA,GAAQ,SAAkD,CAAEC,OAAQ,YAApED,CAAoK,CAAEE,KAAM,UAAWC,OAAQ,2LAE5M,IADc,SAAiBC,GAAQ,IAAIC,EAAgBC,EAAYF,EAAKE,UAAWC,EAAYH,EAAKG,UAAWC,EAAWJ,EAAKI,SAAUC,EAAYL,EAAKK,UAAWC,EAAWN,EAAKM,SAAUC,EAAOP,EAAKO,KAAMC,EAAeR,EAAKS,QAASA,OAA2B,IAAjBD,GAAkCA,EAA2DE,GAAyC,QAA5BT,GAA/CU,EAAAA,EAAAA,gBAAe,cAAkDC,YAAiC,IAAfX,OAAwB,EAASA,EAAWY,eAAiB,GAAI,OAAOC,EAAAA,EAAAA,IAAIC,EAAAA,EAAM,MAAMD,EAAAA,EAAAA,IAAIE,EAAAA,YAAa,CAAEC,WAAYxB,IAAcqB,EAAAA,EAAAA,IAAII,EAAAA,EAAQ,MAAMJ,EAAAA,EAAAA,IAAI,OAAQ,CAAEK,QAAS,WAAYL,EAAAA,EAAAA,IAAI,QAAS,KAAMZ,EAAWQ,EAASU,MAAQ,MAAQV,EAASU,MAAQ,MAAMN,EAAAA,EAAAA,IAAIO,EAAAA,EAAQ,MAAOlB,EAAY,MAAOW,EAAAA,EAAAA,IAAIQ,EAAAA,EAAQ,CAAEF,MAAOlB,EAAWI,SAAUA,EAAUC,KAAMA,EAAMF,UAAWA,KAAcS,EAAAA,EAAAA,IAAIS,EAAAA,GAAY,MAAM,SAAUC,GAAS,IAAIC,EAASC,EAAKF,EAAMG,IAAKC,EAAKJ,EAAMI,GAAI,OAAOd,EAAAA,EAAAA,IAAI,UAAW,CAAEa,IAAKC,GAAIH,EAAM,GAAIA,EAAIC,EAAGnC,IAAoBA,GAAkBsC,EAAAA,EAAAA,GAA4B,CAAC,gIAAkIpB,EAASgB,EAAIC,EAAGlC,IAAqBA,GAAmBqC,EAAAA,EAAAA,GAA4B,CAAC,6gBAA8gB,grBAAirB,iwBAAmwBC,EAAAA,EAAAA,GAAK,OAAOA,EAAAA,EAAAA,GAAK,SAAU,EAAML,KAASrB,OAAeU,EAAAA,EAAAA,IAAInB,EAAQ,MAAMmB,EAAAA,EAAAA,IAAI,UAAW,CAAEa,KAAmBA,EAAAA,EAAAA,IAAI,kBAAkBI,EAAAA,EAAAA,IAAG,MAAO,iBAA6H,GAA1J,SAA66SjB,EAAAA,EAAAA,IAAIkB,EAAAA,KAAM,CAAEC,GAAI,IAAKN,KAAmBA,EAAAA,EAAAA,IAAI,wBAAwBG,EAAAA,EAAAA,GAAK,MAAO,mBAA+H,GAApK,SAAu7ShB,EAAAA,EAAAA,IAAIoB,EAAAA,EAAa,CAAEP,KAAmBA,EAAAA,EAAAA,IAAI,mBAAmBG,EAAAA,EAAAA,GAAK,MAAO,yCAAqJ,GAArL,OAAs8SK,OAAQ,GAAIC,IAAK,wBAAyBC,IAAK,OAAQC,YAAa,YAAaC,YAAaC,EAAQ,SAAuG1B,EAAAA,EAAAA,IAAI,MAAO,CAAEa,KAAmBA,EAAAA,EAAAA,IAAI,qDAAqDI,EAAAA,EAAAA,IAAG,MAAO,mEAA+K,GAA/O,SAAkgTjB,EAAAA,EAAAA,IAAIkB,EAAAA,KAAM,CAAEC,GAAI,KAAO,aAAanB,EAAAA,EAAAA,IAAIkB,EAAAA,KAAM,CAAEC,GAAI,aAAe,aAAanB,EAAAA,EAAAA,IAAIkB,EAAAA,KAAM,CAAEC,GAAI,YAAc,gBAAgBnB,EAAAA,EAAAA,IAAI,MAAO,CAAEa,KAAmBA,EAAAA,EAAAA,IAAI,sCAAsCG,EAAAA,EAAAA,GAAK,MAAO,0DAAsK,GAAzN,SAA4+ShB,EAAAA,EAAAA,IAAI,IAAK,KAAM,uBAA0B,IAAI2B,MAAOC,cAAe,kBAAkB5B,EAAAA,EAAAA,IAAI,IAAK,KAAM","sources":["webpack://zmbush.com/./src/components/default.tsx"],"sourcesContent":["import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nimport _styled from \"@emotion/styled/base\";\nvar _templateObject, _templateObject2;\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; } /* @jsx jsx */\nimport { jsx, css, ClassNames } from '@emotion/react';\nimport '@fontsource/roboto/latin-300.css';\nimport '@fontsource/roboto/latin-400.css';\nimport { MDXProvider } from '@mdx-js/react';\nimport { Link, useStaticQuery } from 'gatsby';\nimport { StaticImage } from 'gatsby-plugin-image';\nimport { Helmet } from 'react-helmet';\nimport { up, down } from '../util/mediaQueries';\nimport Base from './base';\nimport Header from './header';\nimport Navbar from './navbar';\nimport Toc from './toc';\nvar shortCodes = { Toc: Toc };\nvar Footer = _styled(\"footer\", process.env.NODE_ENV === \"production\" ? { target: \"e9zy2yj0\" } : { target: \"e9zy2yj0\", label: \"Footer\" })(process.env.NODE_ENV === \"production\" ? { name: \"1jurd5i\", styles: \"margin-top:30px;border-top:5px solid #1976d2;padding:15px;font-size:.9rem;a{color:black;text-decoration:none;padding-left:10px;padding-right:10px;&:hover{text-decoration:underline;}}\" } : { name: \"1jurd5i\", styles: \"margin-top:30px;border-top:5px solid #1976d2;padding:15px;font-size:.9rem;a{color:black;text-decoration:none;padding-left:10px;padding-right:10px;&:hover{text-decoration:underline;}}\", map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ });\nvar Default = function Default(_ref) { var _data$site; var pageTitle = _ref.pageTitle, hideTitle = _ref.hideTitle, children = _ref.children, headerImg = _ref.headerImg, subtitle = _ref.subtitle, date = _ref.date, _ref$article = _ref.article, article = _ref$article === void 0 ? false : _ref$article; var data = useStaticQuery(\"4064466578\"); var metadata = ((_data$site = data.site) === null || _data$site === void 0 ? void 0 : _data$site.siteMetadata) || {}; return jsx(Base, null, jsx(MDXProvider, { components: shortCodes }, jsx(Helmet, null, jsx(\"meta\", { charSet: \"utf-8\" }), jsx(\"title\", null, pageTitle, metadata.title ? \" | \" + metadata.title : '')), jsx(Navbar, null), hideTitle ? null : jsx(Header, { title: pageTitle, subtitle: subtitle, date: date, headerImg: headerImg }), jsx(ClassNames, null, function (_ref2) { var _cx; var cs = _ref2.css, cx = _ref2.cx; return jsx(\"article\", { css: cx((_cx = {}, _cx[cs(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n                padding-top: 10px;\\n                max-width: 800px;\\n                margin: 0 auto;\\n              \"])))] = article, _cx[cs(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\\n                &:before,\\n                &:after {\\n                  content: '';\\n                  display: table;\\n                }\\n\\n                &:after {\\n                  clear: both;\\n                }\\n\\n                a {\\n                  text-decoration: none;\\n                  font-weight: 400;\\n                  color: #1565c0;\\n\\n                  &:hover {\\n                    text-decoration: underline;\\n                  }\\n                }\\n\\n                > p {\\n                  \", \" {\\n                    padding-left: 10px;\\n                    padding-right: 10px;\\n                  }\\n\\n                  &:first-of-type {\\n                    text-indent: 0;\\n\\n                    &::first-letter {\\n                      color: #1976d2;\\n                      float: left;\\n                      font-size: 230%;\\n                      font-weight: 300;\\n                      line-height: 1;\\n                    }\\n                  }\\n\\n                  text-indent: 25px;\\n                  margin-bottom: 10px;\\n                }\\n\\n                p {\\n                  line-height: 1.5;\\n                }\\n\\n                img {\\n                  \", \" {\\n                    width: 100%;\\n                    height: auto;\\n                  }\\n                }\\n\\n                .gatsby-resp-image-figcaption {\\n                  text-align: right;\\n                  padding-bottom: 10px;\\n                  color: #9e9e9e;\\n                  font-size: 0.8rem;\\n                }\\n\\n                ol,ul {\\n                  margin-bottom: 10px;\\n                }\\n\\n                ol li {\\n                  counter-increment: step-counter;\\n\\n                  &::before {\\n                    content: counter(step-counter) \\\". \\\";\\n                    margin-right: 5px;\\n                    margin-left: 10px;\\n                    font-size: 80%;\\n                  }\\n                }\\n              \"])), down('sm'), down('sm'))] = true, _cx)) }, children); }), jsx(Footer, null, jsx(\"section\", { css: /*#__PURE__*/ css(\"margin:0 auto;\", up('md'), \"{width:800px;}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \";label:Default;\"), process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\") }, jsx(Link, { to: \"/\", css: /*#__PURE__*/ css(\"padding-bottom:10px;\", down('md'), \"{display:block;}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \";label:Default;\"), process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\") }, jsx(StaticImage, { css: /*#__PURE__*/ css(\"margin-top:5px;\", down('md'), \"{left:50%;transform:translateX(-50%);}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \";label:Default;\"), process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL3J1bm5lci93b3JrL3ptYnVzaC5jb20vem1idXNoLmNvbS9tYWluL3NyYy9jb21wb25lbnRzL2RlZmF1bHQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThNd0IiLCJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmsvem1idXNoLmNvbS96bWJ1c2guY29tL21haW4vc3JjL2NvbXBvbmVudHMvZGVmYXVsdC50c3giLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAanN4IGpzeCAqL1xuaW1wb3J0IHsganN4LCBjc3MsIENsYXNzTmFtZXMgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgJ0Bmb250c291cmNlL3JvYm90by9sYXRpbi0zMDAuY3NzJztcbmltcG9ydCAnQGZvbnRzb3VyY2Uvcm9ib3RvL2xhdGluLTQwMC5jc3MnO1xuaW1wb3J0IHsgTURYUHJvdmlkZXIgfSBmcm9tICdAbWR4LWpzL3JlYWN0JztcbmltcG9ydCB7IGdyYXBocWwsIExpbmssIHVzZVN0YXRpY1F1ZXJ5IH0gZnJvbSAnZ2F0c2J5JztcbmltcG9ydCB7IEltYWdlRGF0YUxpa2UsIFN0YXRpY0ltYWdlIH0gZnJvbSAnZ2F0c2J5LXBsdWdpbi1pbWFnZSc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBIZWxtZXQgfSBmcm9tICdyZWFjdC1oZWxtZXQnO1xuXG5pbXBvcnQgeyBHZXRTaXRlTWV0YWRhdGFBbmRJbWFnZVF1ZXJ5IH0gZnJvbSAnLi4vLi4vdHlwZXMvZ3JhcGhxbC10eXBlcyc7XG5pbXBvcnQgeyB1cCwgZG93biB9IGZyb20gJy4uL3V0aWwvbWVkaWFRdWVyaWVzJztcblxuaW1wb3J0IEJhc2UgZnJvbSAnLi9iYXNlJztcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi9oZWFkZXInO1xuaW1wb3J0IE5hdmJhciBmcm9tICcuL25hdmJhcic7XG5pbXBvcnQgVG9jIGZyb20gJy4vdG9jJztcblxuY29uc3Qgc2hvcnRDb2RlcyA9IHtcbiAgVG9jLFxufTtcblxuY29uc3QgRm9vdGVyID0gc3R5bGVkLmZvb3RlcmBcbiAgbWFyZ2luLXRvcDogMzBweDtcbiAgYm9yZGVyLXRvcDogNXB4IHNvbGlkICMxOTc2ZDI7XG4gIHBhZGRpbmc6IDE1cHg7XG4gIGZvbnQtc2l6ZTogLjlyZW07XG5cbiAgYSB7XG4gICAgY29sb3I6IGJsYWNrO1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XG4gICAgcGFkZGluZy1yaWdodDogMTBweDtcblxuICAgICY6aG92ZXIge1xuICAgICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG4gICAgfVxuICB9XG59XG5gO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBwYWdlVGl0bGU6IHN0cmluZztcbiAgaGlkZVRpdGxlPzogYm9vbGVhbjtcbiAgc3VidGl0bGU/OiBzdHJpbmc7XG4gIGRhdGU/OiBzdHJpbmc7XG4gIGhlYWRlckltZz86IHtcbiAgICBjaGlsZEltYWdlU2hhcnA/OiB7XG4gICAgICBnYXRzYnlJbWFnZURhdGE/OiBhbnkgfCBudWxsO1xuICAgIH0gfCBudWxsO1xuICB9IHwgbnVsbDtcbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcbiAgYXJ0aWNsZT86IGJvb2xlYW47XG59XG5cbmNvbnN0IERlZmF1bHQgPSAoe1xuICBwYWdlVGl0bGUsXG4gIGhpZGVUaXRsZSxcbiAgY2hpbGRyZW4sXG4gIGhlYWRlckltZyxcbiAgc3VidGl0bGUsXG4gIGRhdGUsXG4gIGFydGljbGUgPSBmYWxzZSxcbn06IFByb3BzKSA9PiB7XG4gIGNvbnN0IGRhdGEgPSB1c2VTdGF0aWNRdWVyeTxHZXRTaXRlTWV0YWRhdGFBbmRJbWFnZVF1ZXJ5PihncmFwaHFsYFxuICAgIHF1ZXJ5IEdldFNpdGVNZXRhZGF0YUFuZEltYWdlIHtcbiAgICAgIHNpdGUge1xuICAgICAgICBzaXRlTWV0YWRhdGEge1xuICAgICAgICAgIHRpdGxlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIGApO1xuICBjb25zdCBtZXRhZGF0YSA9IGRhdGEuc2l0ZT8uc2l0ZU1ldGFkYXRhIHx8IHt9O1xuICByZXR1cm4gKFxuICAgIDxCYXNlPlxuICAgICAgPE1EWFByb3ZpZGVyIGNvbXBvbmVudHM9e3Nob3J0Q29kZXN9PlxuICAgICAgICA8SGVsbWV0PlxuICAgICAgICAgIDxtZXRhIGNoYXJTZXQ9J3V0Zi04JyAvPlxuICAgICAgICAgIDx0aXRsZT5cbiAgICAgICAgICAgIHtwYWdlVGl0bGV9XG4gICAgICAgICAgICB7bWV0YWRhdGEudGl0bGUgPyBgIHwgJHttZXRhZGF0YS50aXRsZX1gIDogJyd9XG4gICAgICAgICAgPC90aXRsZT5cbiAgICAgICAgPC9IZWxtZXQ+XG4gICAgICAgIDxOYXZiYXIgLz5cbiAgICAgICAge2hpZGVUaXRsZSA/IG51bGwgOiAoXG4gICAgICAgICAgPEhlYWRlclxuICAgICAgICAgICAgdGl0bGU9e3BhZ2VUaXRsZX1cbiAgICAgICAgICAgIHN1YnRpdGxlPXtzdWJ0aXRsZX1cbiAgICAgICAgICAgIGRhdGU9e2RhdGV9XG4gICAgICAgICAgICBoZWFkZXJJbWc9e2hlYWRlckltZyBhcyBJbWFnZURhdGFMaWtlfVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICAgIDxDbGFzc05hbWVzPlxuICAgICAgICAgIHsoeyBjc3M6IGNzLCBjeCB9KSA9PiAoXG4gICAgICAgICAgICA8YXJ0aWNsZVxuICAgICAgICAgICAgICBjc3M9e2N4KHtcbiAgICAgICAgICAgICAgICBbY3NgXG4gICAgICAgICAgICAgICAgcGFkZGluZy10b3A6IDEwcHg7XG4gICAgICAgICAgICAgICAgbWF4LXdpZHRoOiA4MDBweDtcbiAgICAgICAgICAgICAgICBtYXJnaW46IDAgYXV0bztcbiAgICAgICAgICAgICAgYF06IGFydGljbGUsXG4gICAgICAgICAgICAgICAgW2NzYFxuICAgICAgICAgICAgICAgICY6YmVmb3JlLFxuICAgICAgICAgICAgICAgICY6YWZ0ZXIge1xuICAgICAgICAgICAgICAgICAgY29udGVudDogJyc7XG4gICAgICAgICAgICAgICAgICBkaXNwbGF5OiB0YWJsZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAmOmFmdGVyIHtcbiAgICAgICAgICAgICAgICAgIGNsZWFyOiBib3RoO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGEge1xuICAgICAgICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAjMTU2NWMwO1xuXG4gICAgICAgICAgICAgICAgICAmOmhvdmVyIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgPiBwIHtcbiAgICAgICAgICAgICAgICAgICR7ZG93bignc20nKX0ge1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDEwcHg7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICY6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHQtaW5kZW50OiAwO1xuXG4gICAgICAgICAgICAgICAgICAgICY6OmZpcnN0LWxldHRlciB7XG4gICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICMxOTc2ZDI7XG4gICAgICAgICAgICAgICAgICAgICAgZmxvYXQ6IGxlZnQ7XG4gICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAyMzAlO1xuICAgICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiAzMDA7XG4gICAgICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgdGV4dC1pbmRlbnQ6IDI1cHg7XG4gICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHAge1xuICAgICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDEuNTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpbWcge1xuICAgICAgICAgICAgICAgICAgJHtkb3duKCdzbScpfSB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGF1dG87XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLmdhdHNieS1yZXNwLWltYWdlLWZpZ2NhcHRpb24ge1xuICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gICAgICAgICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogMTBweDtcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAjOWU5ZTllO1xuICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAwLjhyZW07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgb2wsdWwge1xuICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBvbCBsaSB7XG4gICAgICAgICAgICAgICAgICBjb3VudGVyLWluY3JlbWVudDogc3RlcC1jb3VudGVyO1xuXG4gICAgICAgICAgICAgICAgICAmOjpiZWZvcmUge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBjb3VudGVyKHN0ZXAtY291bnRlcikgXCIuIFwiO1xuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDVweDtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDEwcHg7XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogODAlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYF06IHRydWUsXG4gICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgICAgICA8L2FydGljbGU+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9DbGFzc05hbWVzPlxuICAgICAgICA8Rm9vdGVyPlxuICAgICAgICAgIDxzZWN0aW9uXG4gICAgICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICAgICAgbWFyZ2luOiAwIGF1dG87XG5cbiAgICAgICAgICAgICAgJHt1cCgnbWQnKX0ge1xuICAgICAgICAgICAgICAgIHdpZHRoOiA4MDBweDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgYH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8TGlua1xuICAgICAgICAgICAgICB0bz0nLydcbiAgICAgICAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IDEwcHg7XG5cbiAgICAgICAgICAgICAgICAke2Rvd24oJ21kJyl9IHtcbiAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYH1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPFN0YXRpY0ltYWdlXG4gICAgICAgICAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiA1cHg7XG4gICAgICAgICAgICAgICAgICAke2Rvd24oJ21kJyl9IHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogNTAlO1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYH1cbiAgICAgICAgICAgICAgICBoZWlnaHQ9ezM0fVxuICAgICAgICAgICAgICAgIHNyYz0nLi4vaW1hZ2VzL3piLWxvZ28uc3ZnJ1xuICAgICAgICAgICAgICAgIGFsdD0nbG9nbydcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0ndHJhY2VkU1ZHJ1xuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgICAgPG5hdlxuICAgICAgICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICAgICAgICBtYXJnaW46IDAgYXV0bztcbiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI1cHg7XG5cbiAgICAgICAgICAgICAgICAke3VwKCdtZCcpfSB7XG4gICAgICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICAgICAgICBhIHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZy10b3A6IDE1cHg7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGB9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxMaW5rIHRvPScvJz5BYm91dCBNZTwvTGluaz5cbiAgICAgICAgICAgICAgPExpbmsgdG89Jy9wcm9qZWN0cyc+UHJvamVjdHM8L0xpbms+XG4gICAgICAgICAgICAgIDxMaW5rIHRvPScvY29udGFjdCc+Q29udGFjdCBNZTwvTGluaz5cbiAgICAgICAgICAgICAgey8qIDxMaW5rIHRvPVwiL2Jsb2dcIj5CbG9nPC9MaW5rPiAqL31cbiAgICAgICAgICAgIDwvbmF2PlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDAuNXJlbTtcblxuICAgICAgICAgICAgICAgICR7ZG93bignbWQnKX0ge1xuICAgICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgICAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwIHtcbiAgICAgICAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiA1cHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBgfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8cD5hbGwgY29udGVudCAmY29weTsgMjAxMS17bmV3IERhdGUoKS5nZXRGdWxsWWVhcigpfSBaYWNoYXJ5IEJ1c2g8L3A+XG4gICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgIE9waW5pb25zIGV4cHJlc3NlZCBoZXJlIGFyZSBzb2xlbHkgbXkgb3duIGFuZCBkbyBub3QgZXhwcmVzcyB0aGUgdmlld3Mgb3Igb3BpbmlvbnNcbiAgICAgICAgICAgICAgICBvZiBteSBlbXBsb3llci5cbiAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICA8L0Zvb3Rlcj5cbiAgICAgIDwvTURYUHJvdmlkZXI+XG4gICAgPC9CYXNlPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRGVmYXVsdDtcbiJdfQ== */\"), height: 34, src: \"../images/zb-logo.svg\", alt: \"logo\", placeholder: \"tracedSVG\", __imageData: require(\"/home/runner/work/zmbush.com/zmbush.com/main/.cache/caches/gatsby-plugin-image/4132324843.json\") })), jsx(\"nav\", { css: /*#__PURE__*/ css(\"margin:0 auto;text-align:center;line-height:25px;\", up('md'), \"{display:inline-block;a{padding-top:15px;display:inline-block;}}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \";label:Default;\"), process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\") }, jsx(Link, { to: \"/\" }, \"About Me\"), jsx(Link, { to: \"/projects\" }, \"Projects\"), jsx(Link, { to: \"/contact\" }, \"Contact Me\")), jsx(\"div\", { css: /*#__PURE__*/ css(\"text-align:right;font-size:0.5rem;\", down('md'), \"{text-align:center;padding:10px;}p{padding-bottom:5px;}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \";label:Default;\"), process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\") }, jsx(\"p\", null, \"all content \\xA9 2011-\", new Date().getFullYear(), \" Zachary Bush\"), jsx(\"p\", null, \"Opinions expressed here are solely my own and do not express the views or opinions of my employer.\")))))); };\nexport default Default;\n"],"names":["_templateObject","_templateObject2","shortCodes","Toc","Footer","_styled","target","name","styles","_ref","_data$site","pageTitle","hideTitle","children","headerImg","subtitle","date","_ref$article","article","metadata","useStaticQuery","site","siteMetadata","jsx","Base","MDXProvider","components","Helmet","charSet","title","Navbar","Header","ClassNames","_ref2","_cx","cs","css","cx","_taggedTemplateLiteralLoose","down","up","Link","to","StaticImage","height","src","alt","placeholder","__imageData","require","Date","getFullYear"],"sourceRoot":""}