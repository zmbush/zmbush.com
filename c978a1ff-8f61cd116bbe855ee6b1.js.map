{"version":3,"file":"c978a1ff-8f61cd116bbe855ee6b1.js","mappings":"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","sources":["webpack://zmbush.com/./src/components/default.tsx"],"sourcesContent":["import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nimport _styled from \"@emotion/styled/base\";\nvar _templateObject, _templateObject2;\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; } /* @jsx jsx */\nimport { jsx, css, ClassNames } from '@emotion/react';\nimport '@fontsource/roboto/latin-300.css';\nimport '@fontsource/roboto/latin-400.css';\nimport { Link, useStaticQuery } from 'gatsby';\nimport { StaticImage } from 'gatsby-plugin-image';\nimport { Helmet } from 'react-helmet';\nimport { up, down } from '../util/mediaQueries';\nimport Base from './base';\nimport Header from './header';\nimport Navbar from './navbar';\nvar Footer = _styled(\"footer\", process.env.NODE_ENV === \"production\" ? { target: \"e9zy2yj0\" } : { target: \"e9zy2yj0\", label: \"Footer\" })(process.env.NODE_ENV === \"production\" ? { name: \"1jurd5i\", styles: \"margin-top:30px;border-top:5px solid #1976d2;padding:15px;font-size:.9rem;a{color:black;text-decoration:none;padding-left:10px;padding-right:10px;&:hover{text-decoration:underline;}}\" } : { name: \"1jurd5i\", styles: \"margin-top:30px;border-top:5px solid #1976d2;padding:15px;font-size:.9rem;a{color:black;text-decoration:none;padding-left:10px;padding-right:10px;&:hover{text-decoration:underline;}}\", map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\", toString: _EMOTION_STRINGIFIED_CSS_ERROR__ });\nvar Default = function Default(_ref) { var _data$site; var pageTitle = _ref.pageTitle, hideTitle = _ref.hideTitle, children = _ref.children, headerImg = _ref.headerImg, subtitle = _ref.subtitle, date = _ref.date, _ref$article = _ref.article, article = _ref$article === void 0 ? false : _ref$article; var data = useStaticQuery(\"3369320570\"); var metadata = ((_data$site = data.site) === null || _data$site === void 0 ? void 0 : _data$site.siteMetadata) || {}; return jsx(Base, null, jsx(Helmet, null, jsx(\"meta\", { charSet: \"utf-8\" }), jsx(\"title\", null, pageTitle, metadata.title ? \" | \" + metadata.title : ''), metadata.siteUrl ? jsx(\"link\", { rel: \"canonical\", href: metadata.siteUrl }) : null), jsx(Navbar, null), hideTitle ? null : jsx(Header, { title: pageTitle, subtitle: subtitle, date: date, headerImg: headerImg }), jsx(ClassNames, null, function (_ref2) { var _cx; var cs = _ref2.css, cx = _ref2.cx; return jsx(\"article\", { css: cx((_cx = {}, _cx[cs(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n                padding-top: 10px;\\n                max-width: 800px;\\n                margin: 0 auto;\\n              \"])))] = article, _cx[cs(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\\n                &:before,\\n                &:after {\\n                  content: '';\\n                  display: table;\\n                }\\n\\n                &:after {\\n                  clear: both;\\n                }\\n\\n                a {\\n                  text-decoration: none;\\n                  font-weight: 400;\\n                  color: #1565c0;\\n\\n                  &:hover {\\n                    text-decoration: underline;\\n                  }\\n                }\\n\\n                > p {\\n                  \", \" {\\n                    padding-left: 10px;\\n                    padding-right: 10px;\\n                  }\\n\\n                  &:first-of-type {\\n                    text-indent: 0;\\n\\n                    &::first-letter {\\n                      color: #1976d2;\\n                      float: left;\\n                      font-size: 230%;\\n                      font-weight: 300;\\n                      line-height: 1;\\n                    }\\n                  }\\n\\n                  text-indent: 25px;\\n                  margin-bottom: 10px;\\n                }\\n\\n                p {\\n                  line-height: 1.5;\\n                }\\n\\n                img {\\n                  \", \" {\\n                    width: 100%;\\n                    height: auto;\\n                  }\\n                }\\n\\n                .gatsby-resp-image-figcaption {\\n                  text-align: right;\\n                  padding-bottom: 10px;\\n                  color: #9e9e9e;\\n                  font-size: 0.8rem;\\n                }\\n              \"])), down('sm'), down('sm'))] = true, _cx)) }, children); }), jsx(Footer, null, jsx(\"section\", { css: /*#__PURE__*/ css(\"margin:0 auto;\", up('md'), \"{width:800px;}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \";label:Default;\"), process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\") }, jsx(Link, { to: \"/\", css: /*#__PURE__*/ css(\"padding-bottom:10px;\", down('md'), \"{display:block;}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \";label:Default;\"), process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\") }, jsx(StaticImage, { css: /*#__PURE__*/ css(\"margin-top:5px;\", down('md'), \"{left:50%;transform:translateX(-50%);}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \";label:Default;\"), process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"), height: 34, src: \"../images/zb-logo.svg\", alt: \"logo\", placeholder: \"tracedSVG\", __imageData: require(\"/home/runner/work/zmbush.com/zmbush.com/main/.cache/caches/gatsby-plugin-image/4132324843.json\") })), jsx(\"nav\", { css: /*#__PURE__*/ css(\"margin:0 auto;text-align:center;line-height:25px;\", up('md'), \"{display:inline-block;a{padding-top:15px;display:inline-block;}}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \";label:Default;\"), process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\") }, jsx(Link, { to: \"/\" }, \"About Me\"), jsx(Link, { to: \"/projects\" }, \"Projects\"), jsx(Link, { to: \"/contact\" }, \"Contact Me\")), jsx(\"div\", { css: /*#__PURE__*/ css(\"text-align:right;font-size:0.5rem;\", down('md'), \"{text-align:center;padding:10px;}p{padding-bottom:5px;}\" + (process.env.NODE_ENV === \"production\" ? \"\" : \";label:Default;\"), process.env.NODE_ENV === \"production\" ? \"\" : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\") }, jsx(\"p\", null, \"all content \\xA9 2011-\", new Date().getFullYear(), \" Zachary Bush\"), jsx(\"p\", null, \"Opinions expressed here are solely my own and do not express the views or opinions of my employer.\"))))); };\nexport default Default;\n"],"names":["_templateObject","_templateObject2","Footer","_styled","target","name","styles","_ref","_data$site","pageTitle","hideTitle","children","headerImg","subtitle","date","_ref$article","article","metadata","useStaticQuery","site","siteMetadata","jsx","Base","Helmet","charSet","title","siteUrl","rel","href","Navbar","Header","ClassNames","_ref2","_cx","cs","css","cx","_taggedTemplateLiteralLoose","down","up","Link","to","StaticImage","height","src","alt","placeholder","__imageData","require","Date","getFullYear"],"sourceRoot":""}